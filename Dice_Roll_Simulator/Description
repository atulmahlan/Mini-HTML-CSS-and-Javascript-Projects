This project is an interactive web application that simulates rolling a six-sided die.
Users can click a button to roll the die, view the result as a graphical representation, and see a history of all previous rolls. 
The project showcases JavaScript functionality including random number generation, dynamic HTML updates, and simple animations.

Key Features:
1. Dice Roll Simulation: Generates a random number between 1 and 6 to simulate rolling a die.
2. Graphical Representation: Displays the result of the roll using Unicode characters representing dice faces.
3. Roll History: Keeps a record of all rolls and displays them in a list.
4. Simple Animation: Adds a rolling animation to enhance the user experience.

Technologies Used:
1. HTML: For structuring the button, dice display, and roll history list.
2. CSS: For basic styling and animations (not shown in the provided code).
3. JavaScript: To handle user interactions, perform the dice roll simulation, update the webpage content, and manage animations.

How It Works:
HTML Elements:
1. buttonEl is the button that the user clicks to roll the die.
2. diceEl is the element where the current dice face is displayed.
3. rollHistoryEl is the element where the history of all rolls is displayed.

Roll Dice Function:
1. The rollDice function generates a random number between 1 and 6 using Math.random() and Math.floor().
2. It converts the roll result to a graphical dice face using the getDiceFace function and updates the diceEl element.
3. The roll result is added to the historyList array, and the roll history is updated by calling updateRollHistory.

Update Roll History Function:
1. The updateRollHistory function clears the existing history in rollHistoryEl.
2. It iterates through the historyList array, creating a new list item for each roll and appending it to the rollHistoryEl.

Get Dice Face Function:
The getDiceFace function maps roll results (1-6) to corresponding Unicode characters representing dice faces.

Event Listener:
1. An event listener is added to the button (buttonEl) to trigger a dice roll when clicked.
2. It also adds a class for the roll animation, removes it after a short delay, and then calls rollDice to display the result.

This project demonstrates how to create an engaging and interactive web application using JavaScript to perform random number generation, update the DOM dynamically, and add simple animations to enhance user interaction.
